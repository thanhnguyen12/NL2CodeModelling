/**
 * 
 */
package textprocess;

import gate.Annotation;
import gate.AnnotationSet;
import gate.Corpus;
import gate.Document;
import gate.Factory;
import gate.FeatureMap;
import gate.Gate;
import gate.GateConstants;
import gate.ProcessingResource;
import gate.corpora.RepositioningInfo;
import gate.creole.SerialAnalyserController;
import gate.util.GateException;
import gate.util.Out;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

//import org.tartarus.snowball.SnowballStemmer;

import config.Config;
import textprocess.GateOpenNLPTagger.SortedAnnotationList;
import utils.Logger;

/**
 * @author anhnt_000
 *
 */
public class TextProcessing {
	public static class SortedAnnotationList extends Vector {
		public SortedAnnotationList() {
			super();
		} // SortedAnnotationList

		public boolean addSortedExclusive(Annotation annot) {
			Annotation currAnot = null;
			// overlapping check
			for (int i = 0; i < size(); ++i) {
				currAnot = (Annotation) get(i);
				if (annot.overlaps(currAnot)) {
					return false;
				} // if
			} // for
			long annotStart = annot.getStartNode().getOffset().longValue();
			long currStart;
			// insert
			for (int i = 0; i < size(); ++i) {
				currAnot = (Annotation) get(i);
				currStart = currAnot.getStartNode().getOffset().longValue();
				if (annotStart < currStart) {
					insertElementAt(annot, i);
					/*
					 * Out.prln("Insert start: "+annotStart+" at position: "+i+
					 * " size="+size()); Out.prln("Current start: "+currStart);
					 */
					return true;
				} // if
			} // for
			int size = size();
			insertElementAt(annot, size);
			// Out.prln("Insert start: "+annotStart+" at size position: "+size);
			return true;
		} // addSorted
	} // SortedAnnotationList

	private SerialAnalyserController annieController;

	/**
	 * @param args
	 */

	public static void main(String args[]) throws Exception, IOException {
		// initialise the GATE library
		Out.prln("Initialising GATE...");
		Gate.init();
		// Load ANNIE plugin
		File gateHome = Gate.getGateHome();
		Logger.log("gateHome: " + gateHome);
		File pluginsHome = new File(gateHome, "plugins");
		Gate.getCreoleRegister().registerDirectories(
				new File(Gate.getGateHome().getAbsolutePath()
						+ "/plugins/Stemmer_Snowball").toURI().toURL());
		Gate.getCreoleRegister().registerDirectories(
				new File(Gate.getGateHome().getAbsolutePath()
						+ "/plugins/Keyphrase_Extraction_Algorithm").toURI().toURL());
		Gate.getCreoleRegister().registerDirectories(
				new File(Gate.getGateHome().getAbsolutePath()
						+ "/plugins/OpenNLP").toURI().toURL());
		
		
		Out.prln("...GATE initialised");
		// initialise ANNIE (this may take several minutes)

		TextProcessing annie = new TextProcessing();
		annie.initAnnie();

		// create a GATE corpus from a directory
		Corpus corpus = (Corpus) Factory
				.createResource("gate.corpora.CorpusImpl");
		File[] files = new File(Config.mainDataPath + "test/").listFiles();
		
		for (File s : files) {
			URL u = null;
			try {
				u = new URL("file:///" + s.getAbsolutePath());
				FeatureMap params = Factory.newFeatureMap();
				params.put("sourceUrl", u);
				params.put("preserveOriginalContent", new Boolean(true));
				params.put("collectRepositioningInfo", new Boolean(true));
				Out.prln("Creating doc for " + u);
				Document doc = (Document) Factory.createResource(
						"gate.corpora.DocumentImpl", params);
				corpus.add(doc);
			} catch (MalformedURLException m) {
				System.out.print(u);
				m.printStackTrace();
			}
		} // for each of args

		// tell the pipeline about the corpus and run it
		annie.setCorpus(corpus);
		annie.execute();

		// for each document, get an XML document with the
		// person and location names added
		Iterator iter = corpus.iterator();
		int count = 0;

		while (iter.hasNext()) {
			Document doc = (Document) iter.next();
			Logger.log(doc);
			AnnotationSet defaultAnnotSet = doc.getAnnotations();
			annie.reconstructDoc(defaultAnnotSet);
			++count;
			
		} // for each doc
	}

	
	public  void reconstructDoc(AnnotationSet annotSet) throws GateException {
		Logger.log("annotSet: "+ annotSet);
		
		StringBuilder reconStr = new StringBuilder();
		for (Annotation annot:annotSet){
			if (annot.getType().equals("Token")){
				reconStr.append(annot.getFeatures().get("string") + " ");
			}
		}
		Logger.log("reconStr: " + reconStr);
	}

	public void initAnnie() throws Exception {
		Out.prln("Initialising OpenNLP...");
		// create a serial analyser controller to run ANNIE with
		annieController = (SerialAnalyserController) Factory.createResource(
				"gate.creole.SerialAnalyserController",
				Factory.newFeatureMap(), Factory.newFeatureMap(), "ANNIE");
		// load each PR as defined in ANNIEConstants

		FeatureMap params = Factory.newFeatureMap(); // use default parameters
		
//		Class<?> stemClass = Class.forName("org.tartarus.snowball.ext." + "englishStemmer");
//		SnowballStemmer stemmer = (SnowballStemmer) stemClass.newInstance(); 	
		
       
		
		params = Factory.newFeatureMap();
		ProcessingResource pr2 = (ProcessingResource) Factory.createResource("gate.opennlp.OpenNlpSentenceSplit", params);
		annieController.add(pr2);

		ProcessingResource pr3 = (ProcessingResource) Factory.createResource("gate.opennlp.OpenNlpTokenizer", params);
		annieController.add(pr3);
//
		ProcessingResource pr4 = (ProcessingResource) Factory.createResource("gate.opennlp.OpenNlpPOS", params);
		annieController.add(pr4);

		params.put( "language", "english" );
		ProcessingResource pr1 = (ProcessingResource) Factory.createResource("stemmer.SnowballStemmer", params);
		annieController.add(pr1);
			
//			params = Factory.newFeatureMap();
//	        params.put( "keyphraseAnnotationType", "Keyphrase" );
//			ProcessingResource pr6 = (ProcessingResource) Factory.createResource("gate.creole.kea.Kea", params);
//			annieController.add(pr6);
			
//		ProcessingResource pr5 = (ProcessingResource) Factory.createResource("gate.opennlp.OpenNlpChunker", params);
//		annieController.add(pr5);

//		ProcessingResource pr6 = (ProcessingResource) Factory.createResource("gate.opennlp.OpenNLPNameFin", params);
//		annieController.add(pr6);

		Out.prln("OpenNLP POSTagger loaded");

	} // initAnnie()

	/** Tell ANNIE's controller about the corpus you want to run on */
	public void setCorpus(Corpus corpus) {
		annieController.setCorpus(corpus);
	} // setCorpus

	/** Run ANNIE */
	public void execute() throws GateException {
		Out.prln("Running OpenNLP...");
		annieController.execute();
		Out.prln("...OpenNLP complete");
	} // execute()

}
