/**
 * 
 */
package databaseprocess;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.TreeMap;

import process.TagsProcessing;
import config.Config;
import data.ThreadData;
import utils.FileUtils;
import utils.Logger;

/**
 * @author anhnt
 *
 */
public class CLTFileProcessing {

	/**
	 * @param args
	 */
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		ArrayList<int[]> allLines  = (ArrayList<int[]>) FileUtils.readObjectFile(Config.mappingLineFilePath);
		GlobalInfo globalInfo =  (GlobalInfo) FileUtils.readObjectFile(Config.globalInfoFilePath);
		
		
		

		globalInfo.doStatistics();
		
		CLTFileProcessing cltProcessing = new CLTFileProcessing();
		cltProcessing.processCLTTable(allLines, globalInfo);
	}

	public void processCLTTable(ArrayList<int[]> allLines, GlobalInfo globalInfo){
		LinkedHashSet<Integer> allThreadIdxs = new LinkedHashSet<Integer>();
		LinkedHashSet<Integer> allPostIdxs = new LinkedHashSet<Integer>();
		LinkedHashSet<Integer> allPQNIdxs = new LinkedHashSet<Integer>();
		LinkedHashSet<Integer> allNameIdxs = new LinkedHashSet<Integer>();
		LinkedHashSet<Integer> allKindIdxs = new LinkedHashSet<Integer>();
		
		HashMap<Long, Integer> combinedAPIIdxCountMap = new HashMap<Long, Integer>(); 
		HashMap<Long, HashSet<Integer>> combinedAPIIdxPostCountMap = new HashMap<Long, HashSet<Integer>>(); 
		HashMap<Long, HashSet<Integer>> combinedAPIIdxThreadCountMap = new HashMap<Long, HashSet<Integer>>(); 
		
		HashMap<Integer, HashSet<Integer>> threadIdxPostIdxsMap = new HashMap<Integer, HashSet<Integer>>();

		
		for (int[] intSplit:allLines){
			int threadIdx = intSplit[0];
			allThreadIdxs.add(threadIdx);
			int postIdx = intSplit[1];
			allPostIdxs.add(postIdx);
			int pqnIdx = intSplit[2];
			allPQNIdxs.add(pqnIdx);
			int nameIdx = intSplit[3];
			allNameIdxs.add(nameIdx);
			allKindIdxs.add(intSplit[4]);
			
			if(threadIdxPostIdxsMap.containsKey(threadIdx)){
				threadIdxPostIdxsMap.get(threadIdx).add(postIdx);
			}
			else {
				HashSet<Integer> postIdxs = new HashSet<>();
				postIdxs.add(postIdx);
				threadIdxPostIdxsMap.put(threadIdx, postIdxs);
			}
			
			
			long combinedAPIIdx = combineAPIIdx(pqnIdx, nameIdx);
			if(!combinedAPIIdxCountMap.containsKey(combinedAPIIdx)){
				combinedAPIIdxCountMap.put(combinedAPIIdx, 1);
			}
			else {
				int curcount = combinedAPIIdxCountMap.get(combinedAPIIdx);
				combinedAPIIdxCountMap.put(combinedAPIIdx, curcount +1);
			}
			if(!combinedAPIIdxPostCountMap.containsKey(combinedAPIIdx)){
				HashSet<Integer> tmp = new HashSet<Integer>();
				tmp.add(postIdx);
				combinedAPIIdxPostCountMap.put(combinedAPIIdx, tmp );
			}
			else {
				combinedAPIIdxPostCountMap.get(combinedAPIIdx).add(postIdx);
			}
			
			if(!combinedAPIIdxThreadCountMap.containsKey(combinedAPIIdx)){
				HashSet<Integer> tmp = new HashSet<Integer>();
				tmp.add(threadIdx);
				combinedAPIIdxThreadCountMap.put(combinedAPIIdx, tmp );
			}
			else {
				combinedAPIIdxThreadCountMap.get(combinedAPIIdx).add(threadIdx);
			}
			
		}
		
		Logger.log("allThreadIdxs size: " + allThreadIdxs.size());
		Logger.log("allPostIdxs size: " + allPostIdxs.size());
		Logger.log("allPQNIdxs size: " + allPQNIdxs.size());
		Logger.log("allNameIdxs size: " + allNameIdxs.size());
		Logger.log("allKindIdxs size: " + allKindIdxs.size());
		System.out.print("allKinds: "); 
		displayAllKinds(allKindIdxs, globalInfo);
		
		
		TreeMap<Integer, ArrayList<Long>> threadCountRankMap = getRankedMap(combinedAPIIdxThreadCountMap);
		
		ArrayList<Long> combinedIdxRankList = new ArrayList<Long>();
		
		for (Integer threadCount:threadCountRankMap.descendingKeySet()){
			combinedIdxRankList.addAll(threadCountRankMap.get(threadCount));
		}

		Logger.log("combinedIdxRankList size: "+ combinedIdxRankList.size());
		
//		for (int i=0; i<Config.topCombinedAPI; i++){
//			Long  combinedIdx= combinedIdxRankList.get(i);
		
		LinkedHashSet<Integer> interestedThreadIdxs = new LinkedHashSet<Integer>();
		int totalThreads = 0;
		
		int count = 0;
		int countd = 0;
		for (Long  combinedIdx:combinedIdxRankList){
			countd++;
			if(countd<=Config.topDiscardCombinedAPI)
				continue;
			int pqnIdx = (int) (combinedIdx/4294967296l);
			int nameIdx = (int) (combinedIdx - pqnIdx*4294967296l);
			
			String pqn = globalInfo.idxTermDict.get(pqnIdx) ;
			String name = globalInfo.idxTermDict.get(nameIdx);
			if(isFeasibleElement(pqn, name, globalInfo)){
				count++;
				Logger.log(combinedIdx + ":" + pqn + ":" + name  + ":" + combinedAPIIdxThreadCountMap.get(combinedIdx).size());
				interestedThreadIdxs.addAll(combinedAPIIdxThreadCountMap.get(combinedIdx));
				totalThreads += combinedAPIIdxThreadCountMap.get(combinedIdx).size();
				if(count==1000)
					break;

			}
			
		}
		
		Logger.log("number of unique interested threads: "+ interestedThreadIdxs.size());
		Logger.log("totalThreads: "+ totalThreads);
		
		processWithThreads(threadIdxPostIdxsMap, interestedThreadIdxs, globalInfo);

	}
	
	public void processWithThreads(HashMap<Integer, HashSet<Integer>> threadIdxPostIdxsMap, LinkedHashSet<Integer> interestedThreadIdxs,
			GlobalInfo globalInfo){
		String key = "d*e3BW8LD1uD7ZxzWeY39g(("; 
		String site = "stackoverflow";
		
		TagsProcessing tagProc = new TagsProcessing(); 
		tagProc.init(key, site);
		
		HashMap<Long, ThreadData> threadIDDataMap = new HashMap<Long, ThreadData>();

		int threadCount = 0; 
		for(Integer threadIdx:interestedThreadIdxs){
			String realThreadIdxStr = globalInfo.idxTermDict.get(threadIdx);
			long realThreadIdx = Long.parseLong(realThreadIdxStr); 
			tagProc.processThread(realThreadIdx);
			threadCount++;
			if(threadCount%1000==0){
				System.out.print(threadCount + "  ");
				if(threadCount%100000==0){
					System.out.println();
				}
			}
		}
		
		FileUtils.writeObjectFile(threadIDDataMap, threadInfoPath);

	}
	
	public boolean isFeasibleElement(String pqn, String name, GlobalInfo globalInfo){
		if(pqn.trim().equals("!undef!")){
			if(globalInfo.nameSet.contains(name))
				return true;
			else
				return false;
		}
		else {
			if(!globalInfo.pqnNameMap.containsKey(pqn.trim())){
				return false;
			}
			else {
				if(pqn.equals(name))
					return true;
				else if (globalInfo.pqnNameMap.get(pqn).contains(name))
					return true;
				else
					return false;
			}
		}
	}
	
	public TreeMap<Integer, ArrayList<Long>> getRankedMap(HashMap<Long, HashSet<Integer>> combinedAPIIdxCountMap){
		TreeMap<Integer, ArrayList<Long>> rankedMap = new TreeMap<Integer, ArrayList<Long>>();
		for (Long combinedIdx:combinedAPIIdxCountMap.keySet()){
			int count = combinedAPIIdxCountMap.get(combinedIdx).size();
			if(rankedMap.containsKey(count)){
				rankedMap.get(count).add(combinedIdx);
			}
			else {
				ArrayList<Long> list = new ArrayList<>();
				list.add(combinedIdx);
				rankedMap.put(count, list);
			}
		}
		return rankedMap;
	}
	
	public long combineAPIIdx(int pqnIdx,int nameIdx ){
		return 4294967296l*(long)pqnIdx + (long)nameIdx;
	}
	
	public void displayAllKinds(LinkedHashSet<Integer> allKindIdxs, GlobalInfo globalInfo){
		for(Integer idx:allKindIdxs){
			System.out.print(globalInfo.idxTermDict.get(idx) + ", ");
			
		}
		System.out.println();
	}
	 
}
